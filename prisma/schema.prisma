generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
  relationMode      = "prisma"
}



model User {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String
  name        String
  email       String    @unique
  phoneNumber String    @unique
  profilePicture  String?
  Booking     Booking[]
  Reviews     Review[]
}

model Property {
  id            String    @id @default(uuid())
  hostId        String //must be from model Host
  title         String
  description   String
  location      String
  pricePerNight Decimal   @db.Decimal(10, 2)
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  rating        Int
  Booking       Booking[]
  Reviews       Review[]
  Amenity       Amenity[]

  host Host @relation(fields: [hostId], references: [id], onUpdate: Cascade, onDelete: Cascade) // all related field will be updated or deleted

  @@index([hostId])
  @@index([title])
  @@index([location])
}

model Review {
  id         String  @id @default(uuid())
  userId     String
  propertyId String
  rating     Int     @default(0)
  comment    String?

  user     User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([propertyId])
  @@index([userId])
}

model Host {
  id              String     @id @default(uuid())
  username        String     @unique
  password        String
  name            String
  email           String     @unique
  phoneNumber     String     @unique
  profilePicture  String?
  aboutMe         String
  property        Property[]
}

model Booking {
  id              String    @id @default(uuid())
  userId          String    @default(uuid())
  propertyId      String    @default(uuid())
  checkinDate     DateTime
  checkoutDate    DateTime
  numberOfGuests  Int
  totalPrice      Decimal   @db.Decimal(10, 2)
  bookingStatus   ItemType

  user     User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade) // all related field will be updated or deleted
  property Property @relation(fields: [propertyId], references: [id], onUpdate: Cascade, onDelete: Cascade) // all related field will be updated or deleted

  @@index([userId])
  @@index([propertyId])
}

model Amenity {
  id       String     @id @default(uuid())
  name     String
  Property Property[]

}

enum ItemType {
  pending
  confirmed
  cancelled
}